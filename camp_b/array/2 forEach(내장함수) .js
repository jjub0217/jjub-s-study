// 배열을 다룰때 너무나도 유용한 내장함수

// 배열 내부의 모든 요소들을 for문으로 출력해라
const superHeroes = [
 '아이언맨', 
 '캡틴 아메리카',
 '토르',
 '닥터스트레인지'
]

for(let i = 0; i < superHeroes.length; i++){
    console.log(superHeroes[i]);
}
/*  아이언맨 
    캡틴 아메리카
    토르
    닥터스트레인지 
*/

// 위처럼 for 문을 돌리지 않고, 배열 내장함수인 forEach 를 사용해서 배열의 모든 요소를 출력해라
// forEach(어떤 작업을 일괄적으로 하고 싶을때 사용)
//      - 함수형 프로그래밍
//      - forEach 함수 안에 또 다른 함수 이름을 쓰면, 그 또 다른 함수자체를 매개변수로 받는 함수이다.
//      - for 문과의 차이점 
//          - for문은 반복을 위한 변수를 선언해야 하며, 조건식과 증감식으로 이루어져 있다.
//            그리고, for 문은 배열의 length 를 따로 선언해줘야 하지만
//          - forEach문은 자신의 내부에서 반복문을 실행하며, 이미 배열의 length를 알고있다.
//            또한 내부에서 반복문을 통해, 자신을 호출한 배열을 순회하면서 
//            수행해야 할 처리를 콜백함수로 전달받아서 반복 호출한다. 


const superHeroes = [
    '아이언맨', 
    '캡틴 아메리카',
    '토르',
    '닥터스트레인지'
   ]

// 방법1   
// function print(hero){
//     console.log(hero);
// }
// superHeroes.forEach(print);// 아이언맨 캡틴 아메리카 토르 닥터스트레인지
function print(v){
    console.log(v);
} // <- v 라는 걸 찍는 함수 
superHeroes.forEach(print); // <- v 라는걸 찍는 함수를 반복할거야. v 가 뭐냐면, superHeroes 라는 배열의 모든 요소들이다.
// <- 함수이름만 넣었는데도 실행이 되네... 신기하네...
// 아이언맨 캡틴 아메리카 토르 닥터스트레인지

// 방법2
superHeroes.forEach(function(v){
    console.log(v); // <- forEach 함수의 () 안에 있는 걸 '콜백함수'라고 한다.
}) // 아이언맨 캡틴 아메리카 토르 닥터스트레인지 

// 방법3
superHeroes.forEach(v => { 
    console.log(v); // <- 배열 안에서 요소들을 순회하면서 함수를 반복 실행한다.
}) // 아이언맨 캡틴 아메리카 토르 닥터스트레인지 


//////////////////////////////////////////////////////////////////////

