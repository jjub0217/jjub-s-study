// << State  >>
/* 
- 기존에 그려졌던 props 나 state 의 변경이 발생하면, 랜더를 다시 할수 있다. (랜더함수가 다시 호출된다.)
- Hooks 
   - class 컴포넌트 아니어도(functional 컴포넌트에서) 
     state 와 다른 React의 기능들을 사용할수 있게 해준다. 
   - functional 컴포넌트에는 state가 없기 때문에, 
     Hooks를 사용하지 않으면, state 를 함수 컴포넌트 내부에서 사용할수 없게 된다.
     하지만, Hooks를 사용하면 함수 컴포넌트 내부에서도 state를 사용할수 있게 된다.
< State >
   - 컴포넌트 내부에서 변경할 수 있는 데이터 (예시: a: 1 -> a: 2) 
   - Class 컴포넌트에서의 State



상태 챕터 :  
클래스 컴포넌트에서 상태를 사용하는 방법을 배우는 것

( 훅 이전의 상황 )
컴포넌트 만들기
1. 함수 컴포넌트로만 
   - 컴포넌트 내부에 state가 없어야 함
   - 생명주기와 관계가 없는 구현코드일때 
2. 클래스 컴포넌트로만 
   - 컴포넌트 내부에 state 가 있어야 함
   - 컴포넌트 내부에 state 가 없지만, 생명주기와 관계가 있는 구현코드일때 




*/
















// 19분 일때 : 46
// 23분 일때 : 42
// 1시간 15분 ~ 2시간 5분  
// 2시간 15분 ~ 3시간 7분 

// 20분 2시간 
// 13시간???????????????????????????????????

// 12시 ~ 7시간 수요일 수업꺼 -> 월요일

// 12시 ~ 6시간 금요일 수업꺼 -> 화요일 
// 12시 ~ 7시간 월요일 수업꺼 -> 수요일
// 12시 ~ 7시간 화요일 수업꺼 -> 목요일
// 12시 ~ 6시간 수요일 수업꺼 -> 금요일
// 12시 ~ 6시간 금요일 수업꺼 -> 토요일